// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: vnet.proto

package netd_v1alpha

import (
	simplePool "github.com/dariopb/netd/proto/simplePool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NicType int32

const (
	NicType_NOTHING   NicType = 0
	NicType_TAP       NicType = 1
	NicType_MAIN      NicType = 2
	NicType_CONTAINER NicType = 3
)

// Enum value maps for NicType.
var (
	NicType_name = map[int32]string{
		0: "NOTHING",
		1: "TAP",
		2: "MAIN",
		3: "CONTAINER",
	}
	NicType_value = map[string]int32{
		"NOTHING":   0,
		"TAP":       1,
		"MAIN":      2,
		"CONTAINER": 3,
	}
)

func (x NicType) Enum() *NicType {
	p := new(NicType)
	*p = x
	return p
}

func (x NicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NicType) Descriptor() protoreflect.EnumDescriptor {
	return file_vnet_proto_enumTypes[0].Descriptor()
}

func (NicType) Type() protoreflect.EnumType {
	return &file_vnet_proto_enumTypes[0]
}

func (x NicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NicType.Descriptor instead.
func (NicType) EnumDescriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{0}
}

type WatchIPMappingResponse_Action int32

const (
	WatchIPMappingResponse_NOTHING  WatchIPMappingResponse_Action = 0
	WatchIPMappingResponse_SNAPSHOT WatchIPMappingResponse_Action = 1
	WatchIPMappingResponse_CHANGE   WatchIPMappingResponse_Action = 2
	WatchIPMappingResponse_DELETE   WatchIPMappingResponse_Action = 3
)

// Enum value maps for WatchIPMappingResponse_Action.
var (
	WatchIPMappingResponse_Action_name = map[int32]string{
		0: "NOTHING",
		1: "SNAPSHOT",
		2: "CHANGE",
		3: "DELETE",
	}
	WatchIPMappingResponse_Action_value = map[string]int32{
		"NOTHING":  0,
		"SNAPSHOT": 1,
		"CHANGE":   2,
		"DELETE":   3,
	}
)

func (x WatchIPMappingResponse_Action) Enum() *WatchIPMappingResponse_Action {
	p := new(WatchIPMappingResponse_Action)
	*p = x
	return p
}

func (x WatchIPMappingResponse_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchIPMappingResponse_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_vnet_proto_enumTypes[1].Descriptor()
}

func (WatchIPMappingResponse_Action) Type() protoreflect.EnumType {
	return &file_vnet_proto_enumTypes[1]
}

func (x WatchIPMappingResponse_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchIPMappingResponse_Action.Descriptor instead.
func (WatchIPMappingResponse_Action) EnumDescriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{8, 0}
}

type WatchVNetsResponse_Action int32

const (
	WatchVNetsResponse_NOTHING  WatchVNetsResponse_Action = 0
	WatchVNetsResponse_SNAPSHOT WatchVNetsResponse_Action = 1
	WatchVNetsResponse_CHANGE   WatchVNetsResponse_Action = 2
	WatchVNetsResponse_DELETE   WatchVNetsResponse_Action = 3
)

// Enum value maps for WatchVNetsResponse_Action.
var (
	WatchVNetsResponse_Action_name = map[int32]string{
		0: "NOTHING",
		1: "SNAPSHOT",
		2: "CHANGE",
		3: "DELETE",
	}
	WatchVNetsResponse_Action_value = map[string]int32{
		"NOTHING":  0,
		"SNAPSHOT": 1,
		"CHANGE":   2,
		"DELETE":   3,
	}
)

func (x WatchVNetsResponse_Action) Enum() *WatchVNetsResponse_Action {
	p := new(WatchVNetsResponse_Action)
	*p = x
	return p
}

func (x WatchVNetsResponse_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchVNetsResponse_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_vnet_proto_enumTypes[2].Descriptor()
}

func (WatchVNetsResponse_Action) Type() protoreflect.EnumType {
	return &file_vnet_proto_enumTypes[2]
}

func (x WatchVNetsResponse_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchVNetsResponse_Action.Descriptor instead.
func (WatchVNetsResponse_Action) EnumDescriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{14, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{0}
}

// NicConfiguration is the main endpoint data that is published and used to connect each IP/nic to a
// particular network.
type NicConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vnet            string           `protobuf:"bytes,1,opt,name=vnet,proto3" json:"vnet,omitempty"`
	Tag             string           `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Name            string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key             string           `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Tags            []string         `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	PublicKey       string           `protobuf:"bytes,6,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Endpoint        string           `protobuf:"bytes,7,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ListenPort      string           `protobuf:"bytes,8,opt,name=listenPort,proto3" json:"listenPort,omitempty"`
	IsGW            bool             `protobuf:"varint,9,opt,name=IsGW,proto3" json:"IsGW,omitempty"`
	NicType         NicType          `protobuf:"varint,10,opt,name=nicType,proto3,enum=vnet.v1alpha.NicType" json:"nicType,omitempty"`
	IPConfiguration *IPConfiguration `protobuf:"bytes,15,opt,name=IPConfiguration,proto3,oneof" json:"IPConfiguration,omitempty"`
}

func (x *NicConfiguration) Reset() {
	*x = NicConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicConfiguration) ProtoMessage() {}

func (x *NicConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicConfiguration.ProtoReflect.Descriptor instead.
func (*NicConfiguration) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{1}
}

func (x *NicConfiguration) GetVnet() string {
	if x != nil {
		return x.Vnet
	}
	return ""
}

func (x *NicConfiguration) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NicConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NicConfiguration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NicConfiguration) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NicConfiguration) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *NicConfiguration) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *NicConfiguration) GetListenPort() string {
	if x != nil {
		return x.ListenPort
	}
	return ""
}

func (x *NicConfiguration) GetIsGW() bool {
	if x != nil {
		return x.IsGW
	}
	return false
}

func (x *NicConfiguration) GetNicType() NicType {
	if x != nil {
		return x.NicType
	}
	return NicType_NOTHING
}

func (x *NicConfiguration) GetIPConfiguration() *IPConfiguration {
	if x != nil {
		return x.IPConfiguration
	}
	return nil
}

type IPConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID string     `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	IPAddress   string     `protobuf:"bytes,2,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	GWAddress   string     `protobuf:"bytes,3,opt,name=GWAddress,proto3" json:"GWAddress,omitempty"`
	DnsConfig   *DNSConfig `protobuf:"bytes,4,opt,name=dnsConfig,proto3" json:"dnsConfig,omitempty"`
	DnsName     string     `protobuf:"bytes,5,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *IPConfiguration) Reset() {
	*x = IPConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfiguration) ProtoMessage() {}

func (x *IPConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfiguration.ProtoReflect.Descriptor instead.
func (*IPConfiguration) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{2}
}

func (x *IPConfiguration) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *IPConfiguration) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *IPConfiguration) GetGWAddress() string {
	if x != nil {
		return x.GWAddress
	}
	return ""
}

func (x *IPConfiguration) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

func (x *IPConfiguration) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

type AllocateIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetID           string            `protobuf:"bytes,1,opt,name=vnetID,proto3" json:"vnetID,omitempty"`
	ContainerID      string            `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	IpAddress        string            `protobuf:"bytes,3,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	DnsName          string            `protobuf:"bytes,4,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	PassThrough      bool              `protobuf:"varint,5,opt,name=passThrough,proto3" json:"passThrough,omitempty"`
	NicConfiguration *NicConfiguration `protobuf:"bytes,6,opt,name=NicConfiguration,proto3" json:"NicConfiguration,omitempty"`
}

func (x *AllocateIpRequest) Reset() {
	*x = AllocateIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIpRequest) ProtoMessage() {}

func (x *AllocateIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIpRequest.ProtoReflect.Descriptor instead.
func (*AllocateIpRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{3}
}

func (x *AllocateIpRequest) GetVnetID() string {
	if x != nil {
		return x.VnetID
	}
	return ""
}

func (x *AllocateIpRequest) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *AllocateIpRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *AllocateIpRequest) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *AllocateIpRequest) GetPassThrough() bool {
	if x != nil {
		return x.PassThrough
	}
	return false
}

func (x *AllocateIpRequest) GetNicConfiguration() *NicConfiguration {
	if x != nil {
		return x.NicConfiguration
	}
	return nil
}

type AllocateIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID      string            `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	NicConfiguration *NicConfiguration `protobuf:"bytes,2,opt,name=NicConfiguration,proto3" json:"NicConfiguration,omitempty"`
	Vnet             *VNet             `protobuf:"bytes,3,opt,name=vnet,proto3" json:"vnet,omitempty"`
}

func (x *AllocateIpResponse) Reset() {
	*x = AllocateIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIpResponse) ProtoMessage() {}

func (x *AllocateIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIpResponse.ProtoReflect.Descriptor instead.
func (*AllocateIpResponse) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{4}
}

func (x *AllocateIpResponse) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *AllocateIpResponse) GetNicConfiguration() *NicConfiguration {
	if x != nil {
		return x.NicConfiguration
	}
	return nil
}

func (x *AllocateIpResponse) GetVnet() *VNet {
	if x != nil {
		return x.Vnet
	}
	return nil
}

type DeallocateIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetID      string `protobuf:"bytes,1,opt,name=vnetID,proto3" json:"vnetID,omitempty"`
	ContainerID string `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
}

func (x *DeallocateIpRequest) Reset() {
	*x = DeallocateIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeallocateIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeallocateIpRequest) ProtoMessage() {}

func (x *DeallocateIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeallocateIpRequest.ProtoReflect.Descriptor instead.
func (*DeallocateIpRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{5}
}

func (x *DeallocateIpRequest) GetVnetID() string {
	if x != nil {
		return x.VnetID
	}
	return ""
}

func (x *DeallocateIpRequest) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type DeallocateIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetID      string `protobuf:"bytes,1,opt,name=vnetID,proto3" json:"vnetID,omitempty"`
	ContainerID string `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	IpAddress   string `protobuf:"bytes,3,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"` //NicConfiguration NicConfiguration = 3;
}

func (x *DeallocateIpResponse) Reset() {
	*x = DeallocateIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeallocateIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeallocateIpResponse) ProtoMessage() {}

func (x *DeallocateIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeallocateIpResponse.ProtoReflect.Descriptor instead.
func (*DeallocateIpResponse) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{6}
}

func (x *DeallocateIpResponse) GetVnetID() string {
	if x != nil {
		return x.VnetID
	}
	return ""
}

func (x *DeallocateIpResponse) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *DeallocateIpResponse) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type WatchIPMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetID string `protobuf:"bytes,1,opt,name=vnetID,proto3" json:"vnetID,omitempty"`
}

func (x *WatchIPMappingRequest) Reset() {
	*x = WatchIPMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchIPMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchIPMappingRequest) ProtoMessage() {}

func (x *WatchIPMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchIPMappingRequest.ProtoReflect.Descriptor instead.
func (*WatchIPMappingRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{7}
}

func (x *WatchIPMappingRequest) GetVnetID() string {
	if x != nil {
		return x.VnetID
	}
	return ""
}

type WatchIPMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action           WatchIPMappingResponse_Action `protobuf:"varint,1,opt,name=action,proto3,enum=vnet.v1alpha.WatchIPMappingResponse_Action" json:"action,omitempty"`
	Id               string                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	VnetId           string                        `protobuf:"bytes,3,opt,name=vnetId,proto3" json:"vnetId,omitempty"`
	Key              string                        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	NicConfiguration *NicConfiguration             `protobuf:"bytes,5,opt,name=nicConfiguration,proto3" json:"nicConfiguration,omitempty"`
}

func (x *WatchIPMappingResponse) Reset() {
	*x = WatchIPMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchIPMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchIPMappingResponse) ProtoMessage() {}

func (x *WatchIPMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchIPMappingResponse.ProtoReflect.Descriptor instead.
func (*WatchIPMappingResponse) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{8}
}

func (x *WatchIPMappingResponse) GetAction() WatchIPMappingResponse_Action {
	if x != nil {
		return x.Action
	}
	return WatchIPMappingResponse_NOTHING
}

func (x *WatchIPMappingResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WatchIPMappingResponse) GetVnetId() string {
	if x != nil {
		return x.VnetId
	}
	return ""
}

func (x *WatchIPMappingResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WatchIPMappingResponse) GetNicConfiguration() *NicConfiguration {
	if x != nil {
		return x.NicConfiguration
	}
	return nil
}

type CreateVNetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vnet       *VNet    `protobuf:"bytes,1,opt,name=vnet,proto3" json:"vnet,omitempty"`
	ReservedIP []string `protobuf:"bytes,2,rep,name=reservedIP,proto3" json:"reservedIP,omitempty"`
}

func (x *CreateVNetRequest) Reset() {
	*x = CreateVNetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVNetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVNetRequest) ProtoMessage() {}

func (x *CreateVNetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVNetRequest.ProtoReflect.Descriptor instead.
func (*CreateVNetRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVNetRequest) GetVnet() *VNet {
	if x != nil {
		return x.Vnet
	}
	return nil
}

func (x *CreateVNetRequest) GetReservedIP() []string {
	if x != nil {
		return x.ReservedIP
	}
	return nil
}

type ListVNetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListVNetsRequest) Reset() {
	*x = ListVNetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVNetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVNetsRequest) ProtoMessage() {}

func (x *ListVNetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVNetsRequest.ProtoReflect.Descriptor instead.
func (*ListVNetsRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{10}
}

type GetVNetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVNetRequest) Reset() {
	*x = GetVNetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVNetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVNetRequest) ProtoMessage() {}

func (x *GetVNetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVNetRequest.ProtoReflect.Descriptor instead.
func (*GetVNetRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{11}
}

func (x *GetVNetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteVNetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteVNetRequest) Reset() {
	*x = DeleteVNetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVNetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVNetRequest) ProtoMessage() {}

func (x *DeleteVNetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVNetRequest.ProtoReflect.Descriptor instead.
func (*DeleteVNetRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteVNetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WatchVNetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WatchVNetsRequest) Reset() {
	*x = WatchVNetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchVNetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchVNetsRequest) ProtoMessage() {}

func (x *WatchVNetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchVNetsRequest.ProtoReflect.Descriptor instead.
func (*WatchVNetsRequest) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{13}
}

func (x *WatchVNetsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WatchVNetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action WatchVNetsResponse_Action `protobuf:"varint,1,opt,name=action,proto3,enum=vnet.v1alpha.WatchVNetsResponse_Action" json:"action,omitempty"`
	Id     string                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Key    string                    `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Vnet   *VNet                     `protobuf:"bytes,4,opt,name=vnet,proto3" json:"vnet,omitempty"`
}

func (x *WatchVNetsResponse) Reset() {
	*x = WatchVNetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchVNetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchVNetsResponse) ProtoMessage() {}

func (x *WatchVNetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchVNetsResponse.ProtoReflect.Descriptor instead.
func (*WatchVNetsResponse) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{14}
}

func (x *WatchVNetsResponse) GetAction() WatchVNetsResponse_Action {
	if x != nil {
		return x.Action
	}
	return WatchVNetsResponse_NOTHING
}

func (x *WatchVNetsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WatchVNetsResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WatchVNetsResponse) GetVnet() *VNet {
	if x != nil {
		return x.Vnet
	}
	return nil
}

type VNets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vnet []*VNet `protobuf:"bytes,1,rep,name=vnet,proto3" json:"vnet,omitempty"`
}

func (x *VNets) Reset() {
	*x = VNets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNets) ProtoMessage() {}

func (x *VNets) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNets.ProtoReflect.Descriptor instead.
func (*VNets) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{15}
}

func (x *VNets) GetVnet() []*VNet {
	if x != nil {
		return x.Vnet
	}
	return nil
}

type VNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag              string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key              string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Subnet           string                 `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	GwIPAddress      string                 `protobuf:"bytes,7,opt,name=gwIPAddress,proto3" json:"gwIPAddress,omitempty"`
	GwLocalIPAddress string                 `protobuf:"bytes,8,opt,name=gwLocalIPAddress,proto3" json:"gwLocalIPAddress,omitempty"`
	GwEndpoint       string                 `protobuf:"bytes,9,opt,name=gwEndpoint,proto3" json:"gwEndpoint,omitempty"`
	GwPublicKey      string                 `protobuf:"bytes,10,opt,name=gwPublicKey,proto3" json:"gwPublicKey,omitempty"`
	DnsConfig        *DNSConfig             `protobuf:"bytes,14,opt,name=dnsConfig,proto3" json:"dnsConfig,omitempty"`
	IpPool           *simplePool.SimplePool `protobuf:"bytes,15,opt,name=ipPool,proto3" json:"ipPool,omitempty"`
}

func (x *VNet) Reset() {
	*x = VNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNet) ProtoMessage() {}

func (x *VNet) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNet.ProtoReflect.Descriptor instead.
func (*VNet) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{16}
}

func (x *VNet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VNet) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VNet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VNet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VNet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *VNet) GetGwIPAddress() string {
	if x != nil {
		return x.GwIPAddress
	}
	return ""
}

func (x *VNet) GetGwLocalIPAddress() string {
	if x != nil {
		return x.GwLocalIPAddress
	}
	return ""
}

func (x *VNet) GetGwEndpoint() string {
	if x != nil {
		return x.GwEndpoint
	}
	return ""
}

func (x *VNet) GetGwPublicKey() string {
	if x != nil {
		return x.GwPublicKey
	}
	return ""
}

func (x *VNet) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

func (x *VNet) GetIpPool() *simplePool.SimplePool {
	if x != nil {
		return x.IpPool
	}
	return nil
}

type DNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []string `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omitempty"`
	Search []string `protobuf:"bytes,2,rep,name=search,proto3" json:"search,omitempty"`
	Ndots  int32    `protobuf:"varint,3,opt,name=ndots,proto3" json:"ndots,omitempty"`
}

func (x *DNSConfig) Reset() {
	*x = DNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSConfig) ProtoMessage() {}

func (x *DNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSConfig.ProtoReflect.Descriptor instead.
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{17}
}

func (x *DNSConfig) GetServer() []string {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *DNSConfig) GetSearch() []string {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *DNSConfig) GetNdots() int32 {
	if x != nil {
		return x.Ndots
	}
	return 0
}

type PoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReservedIPs  map[string]string `protobuf:"bytes,2,rep,name=reservedIPs,proto3" json:"reservedIPs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AllocatedIPs map[string]string `protobuf:"bytes,3,rep,name=allocatedIPs,proto3" json:"allocatedIPs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PoolData) Reset() {
	*x = PoolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vnet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolData) ProtoMessage() {}

func (x *PoolData) ProtoReflect() protoreflect.Message {
	mi := &file_vnet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolData.ProtoReflect.Descriptor instead.
func (*PoolData) Descriptor() ([]byte, []int) {
	return file_vnet_proto_rawDescGZIP(), []int{18}
}

func (x *PoolData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PoolData) GetReservedIPs() map[string]string {
	if x != nil {
		return x.ReservedIPs
	}
	return nil
}

func (x *PoolData) GetAllocatedIPs() map[string]string {
	if x != nil {
		return x.AllocatedIPs
	}
	return nil
}

var File_vnet_proto protoreflect.FileDescriptor

var file_vnet_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x76, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x10, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xf3, 0x02, 0x0a, 0x10, 0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6e,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6e, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73, 0x47, 0x57, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x47, 0x57, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x50, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x49, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x0f,
	0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x57, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x47, 0x57, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf3,
	0x01, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x73,
	0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x4e, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4a, 0x0a,
	0x10, 0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x76, 0x6e, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x04, 0x76, 0x6e, 0x65,
	0x74, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x6e, 0x0a, 0x14, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6e,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x50, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x22, 0xa0, 0x02, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x50, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a,
	0x10, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x76,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x04, 0x76,
	0x6e, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x50, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x49, 0x50, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4e, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x4e,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23,
	0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x4e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x4e, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x76, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56,
	0x4e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x04, 0x76, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52,
	0x04, 0x76, 0x6e, 0x65, 0x74, 0x22, 0x3b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x03, 0x22, 0x2f, 0x0a, 0x05, 0x56, 0x4e, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x76,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x04, 0x76,
	0x6e, 0x65, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x04, 0x56, 0x4e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x77, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x77, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x67, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x77, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x77,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x77, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x77,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x09,
	0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x69, 0x70, 0x50,
	0x6f, 0x6f, 0x6c, 0x22, 0x51, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6e, 0x64, 0x6f, 0x74, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x50, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x73, 0x12, 0x4c,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x50, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x50, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x50, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x50, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x38, 0x0a,
	0x07, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x48,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x50, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x32, 0xfa, 0x04, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4e,
	0x65, 0x74, 0x12, 0x1f, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x4e, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4e, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x56, 0x4e, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4e, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x76, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x4e, 0x65, 0x74, 0x73,
	0x12, 0x1f, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x4e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x4e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x44, 0x65,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x21, 0x2e, 0x76, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x50, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x50, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x0f, 0x5a, 0x0d, 0x2f, 0x6e, 0x65, 0x74, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vnet_proto_rawDescOnce sync.Once
	file_vnet_proto_rawDescData = file_vnet_proto_rawDesc
)

func file_vnet_proto_rawDescGZIP() []byte {
	file_vnet_proto_rawDescOnce.Do(func() {
		file_vnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_vnet_proto_rawDescData)
	})
	return file_vnet_proto_rawDescData
}

var file_vnet_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vnet_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_vnet_proto_goTypes = []interface{}{
	(NicType)(0),                       // 0: vnet.v1alpha.NicType
	(WatchIPMappingResponse_Action)(0), // 1: vnet.v1alpha.WatchIPMappingResponse.Action
	(WatchVNetsResponse_Action)(0),     // 2: vnet.v1alpha.WatchVNetsResponse.Action
	(*Empty)(nil),                      // 3: vnet.v1alpha.Empty
	(*NicConfiguration)(nil),           // 4: vnet.v1alpha.NicConfiguration
	(*IPConfiguration)(nil),            // 5: vnet.v1alpha.IPConfiguration
	(*AllocateIpRequest)(nil),          // 6: vnet.v1alpha.AllocateIpRequest
	(*AllocateIpResponse)(nil),         // 7: vnet.v1alpha.AllocateIpResponse
	(*DeallocateIpRequest)(nil),        // 8: vnet.v1alpha.DeallocateIpRequest
	(*DeallocateIpResponse)(nil),       // 9: vnet.v1alpha.DeallocateIpResponse
	(*WatchIPMappingRequest)(nil),      // 10: vnet.v1alpha.WatchIPMappingRequest
	(*WatchIPMappingResponse)(nil),     // 11: vnet.v1alpha.WatchIPMappingResponse
	(*CreateVNetRequest)(nil),          // 12: vnet.v1alpha.CreateVNetRequest
	(*ListVNetsRequest)(nil),           // 13: vnet.v1alpha.ListVNetsRequest
	(*GetVNetRequest)(nil),             // 14: vnet.v1alpha.GetVNetRequest
	(*DeleteVNetRequest)(nil),          // 15: vnet.v1alpha.DeleteVNetRequest
	(*WatchVNetsRequest)(nil),          // 16: vnet.v1alpha.WatchVNetsRequest
	(*WatchVNetsResponse)(nil),         // 17: vnet.v1alpha.WatchVNetsResponse
	(*VNets)(nil),                      // 18: vnet.v1alpha.VNets
	(*VNet)(nil),                       // 19: vnet.v1alpha.VNet
	(*DNSConfig)(nil),                  // 20: vnet.v1alpha.DNSConfig
	(*PoolData)(nil),                   // 21: vnet.v1alpha.PoolData
	nil,                                // 22: vnet.v1alpha.PoolData.ReservedIPsEntry
	nil,                                // 23: vnet.v1alpha.PoolData.AllocatedIPsEntry
	(*simplePool.SimplePool)(nil),      // 24: simplePool.SimplePool
}
var file_vnet_proto_depIdxs = []int32{
	0,  // 0: vnet.v1alpha.NicConfiguration.nicType:type_name -> vnet.v1alpha.NicType
	5,  // 1: vnet.v1alpha.NicConfiguration.IPConfiguration:type_name -> vnet.v1alpha.IPConfiguration
	20, // 2: vnet.v1alpha.IPConfiguration.dnsConfig:type_name -> vnet.v1alpha.DNSConfig
	4,  // 3: vnet.v1alpha.AllocateIpRequest.NicConfiguration:type_name -> vnet.v1alpha.NicConfiguration
	4,  // 4: vnet.v1alpha.AllocateIpResponse.NicConfiguration:type_name -> vnet.v1alpha.NicConfiguration
	19, // 5: vnet.v1alpha.AllocateIpResponse.vnet:type_name -> vnet.v1alpha.VNet
	1,  // 6: vnet.v1alpha.WatchIPMappingResponse.action:type_name -> vnet.v1alpha.WatchIPMappingResponse.Action
	4,  // 7: vnet.v1alpha.WatchIPMappingResponse.nicConfiguration:type_name -> vnet.v1alpha.NicConfiguration
	19, // 8: vnet.v1alpha.CreateVNetRequest.vnet:type_name -> vnet.v1alpha.VNet
	2,  // 9: vnet.v1alpha.WatchVNetsResponse.action:type_name -> vnet.v1alpha.WatchVNetsResponse.Action
	19, // 10: vnet.v1alpha.WatchVNetsResponse.vnet:type_name -> vnet.v1alpha.VNet
	19, // 11: vnet.v1alpha.VNets.vnet:type_name -> vnet.v1alpha.VNet
	20, // 12: vnet.v1alpha.VNet.dnsConfig:type_name -> vnet.v1alpha.DNSConfig
	24, // 13: vnet.v1alpha.VNet.ipPool:type_name -> simplePool.SimplePool
	22, // 14: vnet.v1alpha.PoolData.reservedIPs:type_name -> vnet.v1alpha.PoolData.ReservedIPsEntry
	23, // 15: vnet.v1alpha.PoolData.allocatedIPs:type_name -> vnet.v1alpha.PoolData.AllocatedIPsEntry
	12, // 16: vnet.v1alpha.NetworkD.CreateVNet:input_type -> vnet.v1alpha.CreateVNetRequest
	13, // 17: vnet.v1alpha.NetworkD.ListVNets:input_type -> vnet.v1alpha.ListVNetsRequest
	14, // 18: vnet.v1alpha.NetworkD.GetVNet:input_type -> vnet.v1alpha.GetVNetRequest
	15, // 19: vnet.v1alpha.NetworkD.DeleteVNet:input_type -> vnet.v1alpha.DeleteVNetRequest
	16, // 20: vnet.v1alpha.NetworkD.WatchVNets:input_type -> vnet.v1alpha.WatchVNetsRequest
	6,  // 21: vnet.v1alpha.NetworkD.AllocateIp:input_type -> vnet.v1alpha.AllocateIpRequest
	8,  // 22: vnet.v1alpha.NetworkD.DeallocateIp:input_type -> vnet.v1alpha.DeallocateIpRequest
	10, // 23: vnet.v1alpha.NetworkD.WatchIPMapping:input_type -> vnet.v1alpha.WatchIPMappingRequest
	19, // 24: vnet.v1alpha.NetworkD.CreateVNet:output_type -> vnet.v1alpha.VNet
	18, // 25: vnet.v1alpha.NetworkD.ListVNets:output_type -> vnet.v1alpha.VNets
	19, // 26: vnet.v1alpha.NetworkD.GetVNet:output_type -> vnet.v1alpha.VNet
	3,  // 27: vnet.v1alpha.NetworkD.DeleteVNet:output_type -> vnet.v1alpha.Empty
	17, // 28: vnet.v1alpha.NetworkD.WatchVNets:output_type -> vnet.v1alpha.WatchVNetsResponse
	7,  // 29: vnet.v1alpha.NetworkD.AllocateIp:output_type -> vnet.v1alpha.AllocateIpResponse
	9,  // 30: vnet.v1alpha.NetworkD.DeallocateIp:output_type -> vnet.v1alpha.DeallocateIpResponse
	11, // 31: vnet.v1alpha.NetworkD.WatchIPMapping:output_type -> vnet.v1alpha.WatchIPMappingResponse
	24, // [24:32] is the sub-list for method output_type
	16, // [16:24] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_vnet_proto_init() }
func file_vnet_proto_init() {
	if File_vnet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vnet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeallocateIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeallocateIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchIPMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchIPMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVNetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVNetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVNetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVNetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchVNetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchVNetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vnet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vnet_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vnet_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vnet_proto_goTypes,
		DependencyIndexes: file_vnet_proto_depIdxs,
		EnumInfos:         file_vnet_proto_enumTypes,
		MessageInfos:      file_vnet_proto_msgTypes,
	}.Build()
	File_vnet_proto = out.File
	file_vnet_proto_rawDesc = nil
	file_vnet_proto_goTypes = nil
	file_vnet_proto_depIdxs = nil
}
