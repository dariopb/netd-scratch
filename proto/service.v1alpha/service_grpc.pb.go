// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: service.proto

package service_v1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceDClient is the client API for ServiceD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceDClient interface {
	// VNet crud API
	Update(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	List(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*Services, error)
	Get(ctx context.Context, in *ServiceGetRequest, opts ...grpc.CallOption) (*Service, error)
	Delete(ctx context.Context, in *ServiceDeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	Watch(ctx context.Context, in *ServiceWatchRequest, opts ...grpc.CallOption) (ServiceD_WatchClient, error)
}

type serviceDClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDClient(cc grpc.ClientConnInterface) ServiceDClient {
	return &serviceDClient{cc}
}

func (c *serviceDClient) Update(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/service.v1alpha.ServiceD/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDClient) List(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*Services, error) {
	out := new(Services)
	err := c.cc.Invoke(ctx, "/service.v1alpha.ServiceD/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDClient) Get(ctx context.Context, in *ServiceGetRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/service.v1alpha.ServiceD/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDClient) Delete(ctx context.Context, in *ServiceDeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/service.v1alpha.ServiceD/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDClient) Watch(ctx context.Context, in *ServiceWatchRequest, opts ...grpc.CallOption) (ServiceD_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceD_ServiceDesc.Streams[0], "/service.v1alpha.ServiceD/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceD_WatchClient interface {
	Recv() (*ServiceWatchResponse, error)
	grpc.ClientStream
}

type serviceDWatchClient struct {
	grpc.ClientStream
}

func (x *serviceDWatchClient) Recv() (*ServiceWatchResponse, error) {
	m := new(ServiceWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceDServer is the server API for ServiceD service.
// All implementations must embed UnimplementedServiceDServer
// for forward compatibility
type ServiceDServer interface {
	// VNet crud API
	Update(context.Context, *Service) (*Service, error)
	List(context.Context, *ServiceListRequest) (*Services, error)
	Get(context.Context, *ServiceGetRequest) (*Service, error)
	Delete(context.Context, *ServiceDeleteRequest) (*Empty, error)
	Watch(*ServiceWatchRequest, ServiceD_WatchServer) error
	mustEmbedUnimplementedServiceDServer()
}

// UnimplementedServiceDServer must be embedded to have forward compatible implementations.
type UnimplementedServiceDServer struct {
}

func (UnimplementedServiceDServer) Update(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceDServer) List(context.Context, *ServiceListRequest) (*Services, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceDServer) Get(context.Context, *ServiceGetRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceDServer) Delete(context.Context, *ServiceDeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceDServer) Watch(*ServiceWatchRequest, ServiceD_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedServiceDServer) mustEmbedUnimplementedServiceDServer() {}

// UnsafeServiceDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceDServer will
// result in compilation errors.
type UnsafeServiceDServer interface {
	mustEmbedUnimplementedServiceDServer()
}

func RegisterServiceDServer(s grpc.ServiceRegistrar, srv ServiceDServer) {
	s.RegisterService(&ServiceD_ServiceDesc, srv)
}

func _ServiceD_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1alpha.ServiceD/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDServer).Update(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceD_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1alpha.ServiceD/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDServer).List(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceD_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1alpha.ServiceD/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDServer).Get(ctx, req.(*ServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceD_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1alpha.ServiceD/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDServer).Delete(ctx, req.(*ServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceD_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceDServer).Watch(m, &serviceDWatchServer{stream})
}

type ServiceD_WatchServer interface {
	Send(*ServiceWatchResponse) error
	grpc.ServerStream
}

type serviceDWatchServer struct {
	grpc.ServerStream
}

func (x *serviceDWatchServer) Send(m *ServiceWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServiceD_ServiceDesc is the grpc.ServiceDesc for ServiceD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1alpha.ServiceD",
	HandlerType: (*ServiceDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _ServiceD_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ServiceD_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ServiceD_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceD_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ServiceD_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
