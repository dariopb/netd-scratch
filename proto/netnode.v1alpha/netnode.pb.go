// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: netnode.proto

package netnode_v1alpha

import (
	netd_v1alpha "github.com/dariopb/netd/proto/netd.v1alpha"
	simplePool "github.com/dariopb/netd/proto/simplePool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{0}
}

// IPConfiguration gives ipconfiguration and local interface information for a
// runtime to be able to attach a VM/container.
type IPConfigurationLocal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID    string     `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	IPAddress      string     `protobuf:"bytes,2,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	GWAddress      string     `protobuf:"bytes,3,opt,name=GWAddress,proto3" json:"GWAddress,omitempty"`
	DnsConfig      *DNSConfig `protobuf:"bytes,4,opt,name=dnsConfig,proto3" json:"dnsConfig,omitempty"`
	DnsName        string     `protobuf:"bytes,5,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	LocalInterface string     `protobuf:"bytes,8,opt,name=localInterface,proto3" json:"localInterface,omitempty"`
	LocalPort      int32      `protobuf:"varint,9,opt,name=localPort,proto3" json:"localPort,omitempty"`
}

func (x *IPConfigurationLocal) Reset() {
	*x = IPConfigurationLocal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPConfigurationLocal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfigurationLocal) ProtoMessage() {}

func (x *IPConfigurationLocal) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfigurationLocal.ProtoReflect.Descriptor instead.
func (*IPConfigurationLocal) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{1}
}

func (x *IPConfigurationLocal) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *IPConfigurationLocal) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *IPConfigurationLocal) GetGWAddress() string {
	if x != nil {
		return x.GWAddress
	}
	return ""
}

func (x *IPConfigurationLocal) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

func (x *IPConfigurationLocal) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *IPConfigurationLocal) GetLocalInterface() string {
	if x != nil {
		return x.LocalInterface
	}
	return ""
}

func (x *IPConfigurationLocal) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

type VNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag         string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key         string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Subnet      string                 `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	GwIPAddress string                 `protobuf:"bytes,7,opt,name=gwIPAddress,proto3" json:"gwIPAddress,omitempty"`
	GwEndpoint  string                 `protobuf:"bytes,8,opt,name=gwEndpoint,proto3" json:"gwEndpoint,omitempty"`
	GwPublicKey string                 `protobuf:"bytes,9,opt,name=gwPublicKey,proto3" json:"gwPublicKey,omitempty"`
	DnsConfig   *DNSConfig             `protobuf:"bytes,10,opt,name=dnsConfig,proto3" json:"dnsConfig,omitempty"`
	IpPool      *simplePool.SimplePool `protobuf:"bytes,11,opt,name=ipPool,proto3" json:"ipPool,omitempty"`
}

func (x *VNet) Reset() {
	*x = VNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNet) ProtoMessage() {}

func (x *VNet) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNet.ProtoReflect.Descriptor instead.
func (*VNet) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{2}
}

func (x *VNet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VNet) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VNet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VNet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VNet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *VNet) GetGwIPAddress() string {
	if x != nil {
		return x.GwIPAddress
	}
	return ""
}

func (x *VNet) GetGwEndpoint() string {
	if x != nil {
		return x.GwEndpoint
	}
	return ""
}

func (x *VNet) GetGwPublicKey() string {
	if x != nil {
		return x.GwPublicKey
	}
	return ""
}

func (x *VNet) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

func (x *VNet) GetIpPool() *simplePool.SimplePool {
	if x != nil {
		return x.IpPool
	}
	return nil
}

type DNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []string `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omitempty"`
	Search []string `protobuf:"bytes,2,rep,name=search,proto3" json:"search,omitempty"`
	Ndots  int32    `protobuf:"varint,3,opt,name=ndots,proto3" json:"ndots,omitempty"`
}

func (x *DNSConfig) Reset() {
	*x = DNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSConfig) ProtoMessage() {}

func (x *DNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSConfig.ProtoReflect.Descriptor instead.
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{3}
}

func (x *DNSConfig) GetServer() []string {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *DNSConfig) GetSearch() []string {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *DNSConfig) GetNdots() int32 {
	if x != nil {
		return x.Ndots
	}
	return 0
}

type AllocateIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetID      string               `protobuf:"bytes,1,opt,name=vnetID,proto3" json:"vnetID,omitempty"`
	ContainerID string               `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	IpAddress   string               `protobuf:"bytes,3,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	DnsName     string               `protobuf:"bytes,4,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	NicType     netd_v1alpha.NicType `protobuf:"varint,5,opt,name=nicType,proto3,enum=vnet.v1alpha.NicType" json:"nicType,omitempty"`
	IsDefaultGW bool                 `protobuf:"varint,6,opt,name=isDefaultGW,proto3" json:"isDefaultGW,omitempty"`
}

func (x *AllocateIpRequest) Reset() {
	*x = AllocateIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIpRequest) ProtoMessage() {}

func (x *AllocateIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIpRequest.ProtoReflect.Descriptor instead.
func (*AllocateIpRequest) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{4}
}

func (x *AllocateIpRequest) GetVnetID() string {
	if x != nil {
		return x.VnetID
	}
	return ""
}

func (x *AllocateIpRequest) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *AllocateIpRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *AllocateIpRequest) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *AllocateIpRequest) GetNicType() netd_v1alpha.NicType {
	if x != nil {
		return x.NicType
	}
	return netd_v1alpha.NicType(0)
}

func (x *AllocateIpRequest) GetIsDefaultGW() bool {
	if x != nil {
		return x.IsDefaultGW
	}
	return false
}

type AllocateIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID     string                `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	IpConfiguration *IPConfigurationLocal `protobuf:"bytes,2,opt,name=ipConfiguration,proto3" json:"ipConfiguration,omitempty"`
	Vnet            *VNet                 `protobuf:"bytes,3,opt,name=vnet,proto3" json:"vnet,omitempty"`
}

func (x *AllocateIpResponse) Reset() {
	*x = AllocateIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIpResponse) ProtoMessage() {}

func (x *AllocateIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIpResponse.ProtoReflect.Descriptor instead.
func (*AllocateIpResponse) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{5}
}

func (x *AllocateIpResponse) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *AllocateIpResponse) GetIpConfiguration() *IPConfigurationLocal {
	if x != nil {
		return x.IpConfiguration
	}
	return nil
}

func (x *AllocateIpResponse) GetVnet() *VNet {
	if x != nil {
		return x.Vnet
	}
	return nil
}

type DeallocateIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetID      string `protobuf:"bytes,1,opt,name=vnetID,proto3" json:"vnetID,omitempty"`
	ContainerID string `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
}

func (x *DeallocateIpRequest) Reset() {
	*x = DeallocateIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeallocateIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeallocateIpRequest) ProtoMessage() {}

func (x *DeallocateIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeallocateIpRequest.ProtoReflect.Descriptor instead.
func (*DeallocateIpRequest) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{6}
}

func (x *DeallocateIpRequest) GetVnetID() string {
	if x != nil {
		return x.VnetID
	}
	return ""
}

func (x *DeallocateIpRequest) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type DeallocateIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID     string                `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	IpConfiguration *IPConfigurationLocal `protobuf:"bytes,2,opt,name=ipConfiguration,proto3" json:"ipConfiguration,omitempty"`
}

func (x *DeallocateIpResponse) Reset() {
	*x = DeallocateIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netnode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeallocateIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeallocateIpResponse) ProtoMessage() {}

func (x *DeallocateIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netnode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeallocateIpResponse.ProtoReflect.Descriptor instead.
func (*DeallocateIpResponse) Descriptor() ([]byte, []int) {
	return file_netnode_proto_rawDescGZIP(), []int{7}
}

func (x *DeallocateIpResponse) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *DeallocateIpResponse) GetIpConfiguration() *IPConfigurationLocal {
	if x != nil {
		return x.IpConfiguration
	}
	return nil
}

var File_netnode_proto protoreflect.FileDescriptor

var file_netnode_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x1a, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x14, 0x49, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x57, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x57, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x04, 0x56, 0x4e, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x77, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x77, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x77, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x77, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x77, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x0a, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x22,
	0x51, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x64, 0x6f,
	0x74, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x57, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x57, 0x22, 0xb2, 0x01,
	0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0f, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x0f, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x76, 0x6e, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x04, 0x76, 0x6e,
	0x65, 0x74, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4f,
	0x0a, 0x0f, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x0f,
	0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0xc1, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x2f, 0x6e, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_netnode_proto_rawDescOnce sync.Once
	file_netnode_proto_rawDescData = file_netnode_proto_rawDesc
)

func file_netnode_proto_rawDescGZIP() []byte {
	file_netnode_proto_rawDescOnce.Do(func() {
		file_netnode_proto_rawDescData = protoimpl.X.CompressGZIP(file_netnode_proto_rawDescData)
	})
	return file_netnode_proto_rawDescData
}

var file_netnode_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_netnode_proto_goTypes = []interface{}{
	(*Empty)(nil),                 // 0: netnode.v1alpha.Empty
	(*IPConfigurationLocal)(nil),  // 1: netnode.v1alpha.IPConfigurationLocal
	(*VNet)(nil),                  // 2: netnode.v1alpha.VNet
	(*DNSConfig)(nil),             // 3: netnode.v1alpha.DNSConfig
	(*AllocateIpRequest)(nil),     // 4: netnode.v1alpha.AllocateIpRequest
	(*AllocateIpResponse)(nil),    // 5: netnode.v1alpha.AllocateIpResponse
	(*DeallocateIpRequest)(nil),   // 6: netnode.v1alpha.DeallocateIpRequest
	(*DeallocateIpResponse)(nil),  // 7: netnode.v1alpha.DeallocateIpResponse
	(*simplePool.SimplePool)(nil), // 8: simplePool.SimplePool
	(netd_v1alpha.NicType)(0),     // 9: vnet.v1alpha.NicType
}
var file_netnode_proto_depIdxs = []int32{
	3, // 0: netnode.v1alpha.IPConfigurationLocal.dnsConfig:type_name -> netnode.v1alpha.DNSConfig
	3, // 1: netnode.v1alpha.VNet.dnsConfig:type_name -> netnode.v1alpha.DNSConfig
	8, // 2: netnode.v1alpha.VNet.ipPool:type_name -> simplePool.SimplePool
	9, // 3: netnode.v1alpha.AllocateIpRequest.nicType:type_name -> vnet.v1alpha.NicType
	1, // 4: netnode.v1alpha.AllocateIpResponse.ipConfiguration:type_name -> netnode.v1alpha.IPConfigurationLocal
	2, // 5: netnode.v1alpha.AllocateIpResponse.vnet:type_name -> netnode.v1alpha.VNet
	1, // 6: netnode.v1alpha.DeallocateIpResponse.ipConfiguration:type_name -> netnode.v1alpha.IPConfigurationLocal
	4, // 7: netnode.v1alpha.NetNode.AllocateIp:input_type -> netnode.v1alpha.AllocateIpRequest
	6, // 8: netnode.v1alpha.NetNode.DeallocateIp:input_type -> netnode.v1alpha.DeallocateIpRequest
	5, // 9: netnode.v1alpha.NetNode.AllocateIp:output_type -> netnode.v1alpha.AllocateIpResponse
	7, // 10: netnode.v1alpha.NetNode.DeallocateIp:output_type -> netnode.v1alpha.DeallocateIpResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_netnode_proto_init() }
func file_netnode_proto_init() {
	if File_netnode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_netnode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netnode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPConfigurationLocal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netnode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netnode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netnode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netnode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netnode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeallocateIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netnode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeallocateIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netnode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_netnode_proto_goTypes,
		DependencyIndexes: file_netnode_proto_depIdxs,
		MessageInfos:      file_netnode_proto_msgTypes,
	}.Build()
	File_netnode_proto = out.File
	file_netnode_proto_rawDesc = nil
	file_netnode_proto_goTypes = nil
	file_netnode_proto_depIdxs = nil
}
